string FAKE_ROOM = "fake_room";
string FAKE_LIGHT = "fake_light";
string FAKE_PAINTING = "fake_painting";
string FAKE_TROPHY = "fake_trophy";
string FAKE_PLATFORM = "fake_platform";
string FAKE_CROWN = "fake_crown";
string FAKE_PEDESTAL = "fake_pedestal";

string MAGE_THUG = "mage_thug";
string MAGE_PRISON_CEILING = "mage_prison_ceiling";
string MAGE_POOL_FLOOR = "mage_pool_floor";

string DISPLAY_CABINET_LID1 = "display_cabinet_lid_1";
string DISPLAY_CABINET_LID2 = "display_cabinet_lid_2";

string POPUP_TO_MOSQUE = "popup_to_mosque";

string CAMERA_TOPFLOOR = "camera_topfloor";
string CAMERA_ATRIUM = "camera_atrium";
string TARGET_CAMERAS = "target_callscriptfunction_cameras";
string TARGET_CAMERA_POWER = "target_callscriptfunction_camera_power";

// Merchant house
string MERCHANT_KITCHEN_POT = "atdm_moveable_cookpot_1";
string MERCHANT_SECRET_BUTTON = "atdm_mover_button_3";

// MAGE HOUSE
string MAGE_FIREPLACE_LEVER = "atdm_switch_translate_lever_1";

// Security camera
float currentCamera;

// Mosque stuff
string TRIGGER_MOSQUE_ARCHIVE_DOOR = "trigger_mosque_archive_door";

string ARCHIVE_DOOR = "atdm_mover_door_sliding_10";
string TRIGGER_GAS_TRAP = "trigger_relay_1";
string GAS_TRAP_DOOR_CHANGE_TARGET = "atdm_target_changetarget_3";
string GAS_TRAP_EMITTER = "func_emitter_2";

void frobManuscript()
{
	sys.trigger(sys.getEntity(TRIGGER_GAS_TRAP));
}

void triggerGasTrap()
{
	entity gasTrap = sys.getEntity(GAS_TRAP_EMITTER);

	gasTrap.startSound("snd_gas", SND_CHANNEL_UNUSED, false);
	sys.trigger(gasTrap);
	gasTrap.StimEnable(3, 1);

	// close the door if it's still open
	sys.getEntity(ARCHIVE_DOOR).Close();

	// disable the door rune lock
	sys.getEntity(TRIGGER_MOSQUE_ARCHIVE_DOOR).removeTarget(sys.getEntity(ARCHIVE_DOOR));
}

void triggerArchiveDoor()
{
	sys.trigger(sys.getEntity(TRIGGER_MOSQUE_ARCHIVE_DOOR));
}

void frobCandlestick(entity ent)
{
	entity candle = ent.getBindMaster();
	candle.remove();

	frob_item(ent);
}

void frob_mosque_sign()
{
	sys.trigger(sys.getEntity(POPUP_TO_MOSQUE));
}

void removeEntity(string entityName)
{
	sys.getEntity(entityName).remove();
}

void enterMagePrison(entity zone)
{
	removeEntity(FAKE_ROOM);
	removeEntity(FAKE_LIGHT);
	removeEntity(FAKE_PAINTING);
	removeEntity(FAKE_TROPHY);
	removeEntity(FAKE_CROWN);
	removeEntity(FAKE_PEDESTAL);

	sys.wait(2);

	sys.trigger(sys.getEntity(MAGE_THUG));
	sys.getEntity(MAGE_PRISON_CEILING).setSolid(1);
	sys.getEntity(MAGE_POOL_FLOOR).setSolid(1);
}

void alertMageThug()
{
	sys.println("alerting AI");
	sys.getEntity(MAGE_THUG).setAlertLevel(20);
}


void setJewelleryCaseFrobable(float frobable)
{
	sys.getEntity(DISPLAY_CABINET_LID1).setFrobable(frobable);
	sys.getEntity(DISPLAY_CABINET_LID2).setFrobable(frobable);
}

void setJewelleryCaseFrobableOn(entity zone)
{
	setJewelleryCaseFrobable(1);
}

void setJewelleryCaseFrobableOff(entity zone)
{
	setJewelleryCaseFrobable(0);
}

void removePrisoner(entity ent_target, entity triggerEntity, entity ent_callscriptfunction)
{
	 string name = triggerEntity.getName();

	 sys.println("triggerEntity name: " + name);

	 if (name == "prisoner1")
	 {
		triggerEntity.remove();
	 }
}

///////////////////
// Merchant House
///////////////////

void enterMerchantHouseKitchen(entity zone)
{
	sys.getEntity(MERCHANT_KITCHEN_POT).setFrobable(1);
	sys.getEntity(MERCHANT_SECRET_BUTTON).setFrobable(1);
}

// Prevent frobbing the pot and secret button through bedroom wall
void exitMerchantHouseKitchen(entity zone)
{
	sys.getEntity(MERCHANT_KITCHEN_POT).setFrobable(0);
	sys.getEntity(MERCHANT_SECRET_BUTTON).setFrobable(0);
}

///////////////////
// Mage House
///////////////////

void enterMageFireplace(entity zone)
{
	sys.getEntity(MAGE_FIREPLACE_LEVER).setFrobable(1);
}

void exitMageFireplace(entity zone)
{
	sys.getEntity(MAGE_FIREPLACE_LEVER).setFrobable(0);
}

//////////////////
// Other stuff
//////////////////

void waiterBark()
{
	$cafeWaiter.bark("snd_greeting");
}

void frobBottle(entity bottle)
{
	sys.trigger($trigger_count_bottle_message);
	frob_item(bottle);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// SECURITY CAMERA CODE
// 
//   This allows the player to cycle through multiple camera screens by pushing a button.
//   It's a good way to have multiple screens without tanking performance as only one screen
//   is displayed at a time
//
// SETUP REQUIREMENTS:
//   - a 'cycle cameras' button that targets a target_callscriptfunction entity (NOT using foreach)
//   - a 'power' button that targets another target_callscriptfunction entity (NOT using foreach)
//   - both the target_callscriptfunction entities must target each camera screen
//   - All screens must have a unique int spawnarg called 'sequence'
//   - All but one of the screens must be hidden at map start using the 'hide = 1' spawnarag
//////////////////////////////////////////////////////////////////////////////////////////////////////

boolean startsHidden(entity e)
{
	return ( e.getIntKey("hide") == 1 );
}

// The cameras are either all on or they are all off.
boolean areCamerasOff()
{
	float i;
	entity cameraTarget = sys.getEntity(TARGET_CAMERAS);

	for(i = 0; i < cameraTarget.numTargets(); i++)
	{
		entity screen = cameraTarget.getTarget(i);
		entity camera = screen.getEntityKey("cameraTarget");

		if ( camera.getSecurityCameraState() == 4 )  // 4 = powered off
		{
			return true;
		}
	}
	return false;
}

// Toggles the cameras on and off.  We need this because if we just use
// normal buttons, all screens will toggle on at once and tank performance
void toggleCameras()
{
	float i;
	entity target = sys.getEntity(TARGET_CAMERA_POWER);
	boolean poweredOff = areCamerasOff();

	for(i = 0; i < target.numTargets(); i++)
	{
		entity screen = target.getTarget(i);
		entity camera = screen.getEntityKey("cameraTarget");

		if (poweredOff)
		{
			// Turn the camera on but hide the screen
			camera.On();
			if ( startsHidden(screen))
			{
				screen.hide();
			}
		}
		else
		{
			camera.Off();
		}
	}
}

// This acts as state.  If it returns true, the cameras were just powered on.
boolean areAllScreensShowing()
{
	float i;
	entity cameraTarget = sys.getEntity(TARGET_CAMERAS);

	for(i = 0; i < cameraTarget.numTargets(); i++)
	{
		entity screen = cameraTarget.getTarget(i);
		if ( screen.isHidden() )
		{
			return false;
		}
	}
	return true;
}

void cycleCameras()
{
	// Do nothing if the cameras are turned off
	if (areCamerasOff())
	{
		return;
	}

	float i;

	entity cameraTarget = sys.getEntity(TARGET_CAMERAS);
	float numberOfCameras = cameraTarget.numTargets();
	entity screen;

	// This means the cameras were just powered on, so all screens will be NOT hidden
	// hide the ones with the 'hide = 1' spawnarg
	if ( areAllScreensShowing() )
	{
		for(i = 0; i < numberOfCameras; i++)
		{
			screen = cameraTarget.getTarget(i);

			if ( startsHidden(screen) )
			{
				screen.hide();
			}
		}
	}
	else
	{
		// Find the currently showing screen, hide it and record its sequence number
		for(i = 0; i < numberOfCameras; i++)
		{
			screen = cameraTarget.getTarget(i);

			// Hide the screen that's currently being shown
			if ( !screen.isHidden() )
			{
				// store the sequence of the currently showing camera
				currentCamera = screen.getIntKey("sequence");
				screen.hide();
			}
		}

		// Show the next one in sequence
		for(i = 0; i < numberOfCameras; i++)
		{
			screen = cameraTarget.getTarget(i);
			float sequence = screen.getIntKey("sequence");
			float nextCamera = currentCamera + 1;
			
			if ( nextCamera > numberOfCameras )
			{
				nextCamera = 1;
			}

			if (sequence == nextCamera)
			{
				screen.show();
				return;
			}
		}
	}
}

/////////////////////////
// END SECURITY CAMERA CODE
/////////////////////////

// main - keep at bottom
void main()
{
	sys.waitFrame();
}