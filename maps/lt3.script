string FAKE_ROOM = "fake_room";
string FAKE_LIGHT = "fake_light";
string FAKE_PAINTING = "fake_painting";
string FAKE_TROPHY = "fake_trophy";
string FAKE_PLATFORM = "fake_platform";
string FAKE_CROWN = "fake_crown";
string FAKE_PEDESTAL = "fake_pedestal";

string MAGE_THUG = "mage_thug";
string MAGE_PRISON_CEILING = "mage_prison_ceiling";
string MAGE_POOL_FLOOR = "mage_pool_floor";

string DISPLAY_CABINET_LID1 = "display_cabinet_lid_1";
string DISPLAY_CABINET_LID2 = "display_cabinet_lid_2";

string POPUP_TO_MOSQUE = "popup_to_mosque";

string CAMERA_TOPFLOOR = "camera_topfloor";
string CAMERA_ATRIUM = "camera_atrium";
string TARGET_CAMERAS = "target_callscriptfunction_cameras";

//////////////////////////
// Latched door entities
//////////////////////////

// MOSQUE OFFICE
string MOSQUE_OFFICE_LATCH = "mosque_office_latch";
string MOSQUE_OFFICE_DOOR = "atdm_mover_door_115";

// NAVAL BUILDING BACK GATE
string GATE_LATCH = "gate_latch1";
string GATE_DOOR = "atdm_mover_door_141";

// NAVAL OFFICER HOUSE
string OFFICER_HOUSE_LATCH = "func_static_655";
string OFFICER_HOUSE_DOOR = "atdm_mover_door_43";
string OFFICER_HOUSE_DOOR2 = "atdm_mover_door_42";

// MERCHANT HOUSE
string MERCHANT_HOUSE_LATCH = "func_static_3434";
string MERCHANT_HOUSE_DOOR = "atdm_mover_door_5";
string MERCHANT_HOUSE_DOOR2 = "atdm_mover_door_22";

string MERCHANT_KITCHEN_POT = "atdm_moveable_cookpot_1";
string MERCHANT_SECRET_BUTTON = "atdm_mover_button_3";

void frob_mosque_sign()
{
    sys.trigger(sys.getEntity(POPUP_TO_MOSQUE));
}

void removeEntity(string entityName)
{
    sys.getEntity(entityName).remove();
}

void enterMagePrison(entity zone)
{
    removeEntity(FAKE_ROOM);
    removeEntity(FAKE_LIGHT);
    removeEntity(FAKE_PAINTING);
    removeEntity(FAKE_TROPHY);
    removeEntity(FAKE_CROWN);
    removeEntity(FAKE_PEDESTAL);

    sys.wait(2);

    sys.trigger(sys.getEntity(MAGE_THUG));
    sys.getEntity(MAGE_PRISON_CEILING).setSolid(1);
    sys.getEntity(MAGE_POOL_FLOOR).setSolid(1);
}

void alertMageThug()
{
    sys.println("alerting AI");
    sys.getEntity(MAGE_THUG).setAlertLevel(20);
}


void setJewelleryCaseFrobable(float frobable)
{
    sys.getEntity(DISPLAY_CABINET_LID1).setFrobable(frobable);
    sys.getEntity(DISPLAY_CABINET_LID2).setFrobable(frobable);
}

void setJewelleryCaseFrobableOn(entity zone)
{
    setJewelleryCaseFrobable(1);
}

void setJewelleryCaseFrobableOff(entity zone)
{
    setJewelleryCaseFrobable(0);
}

void removePrisoner(entity ent_target, entity triggerEntity, entity ent_callscriptfunction)
{
     string name = triggerEntity.getName();

     sys.println("triggerEntity name: " + name);

     if (name == "prisoner1")
     {
        triggerEntity.remove();
     }
}

///////////////////
// Merchant House
///////////////////

void enterMerchantHouseKitchen(entity zone)
{
    sys.getEntity(MERCHANT_KITCHEN_POT).setFrobable(1);
    sys.getEntity(MERCHANT_SECRET_BUTTON).setFrobable(1);
}

// Prevent frobbing the pot and secret button through bedroom wall
void exitMerchantHouseKitchen(entity zone)
{
    sys.getEntity(MERCHANT_KITCHEN_POT).setFrobable(0);
    sys.getEntity(MERCHANT_SECRET_BUTTON).setFrobable(0);
}

//////////////////
// Other stuff
//////////////////

void waiterBark()
{
    $cafeWaiter.bark("snd_greeting");
}

void frobBottle(entity bottle)
{
    sys.trigger($trigger_count_bottle_message);
    frob_item(bottle);
}

// The camers are either all on or they are all off.
boolean areCamerasOff()
{
	float i;
    entity cameraTarget = sys.getEntity(TARGET_CAMERAS);

	for(i = 0; i < cameraTarget.numTargets(); i++)
	{
        entity e = cameraTarget.getTarget(i);
        if (e.getSecurityCameraState() == 4)  // 4 = powered off
        {
            return true;
        }
    }
    return false;
}

void cycleCameras()
{
    sys.println("Called cycleCameras");

    if (areCamerasOff())
    {
        return;
    }

	float i;

    entity cameraTarget = sys.getEntity(TARGET_CAMERAS);

	for(i = 0; i < cameraTarget.numTargets(); i++)
	{
		entity e = cameraTarget.getTarget(i);
        sys.println(e.getName());
        sys.println(e.getSecurityCameraState());
    }
}

// main - keep at bottom
void main()
{
    sys.waitFrame();
}